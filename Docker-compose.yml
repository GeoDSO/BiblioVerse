services:
  # PostgreSQL
  db:
    image: postgres:16
    container_name: ${DB_HOST}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:${DB_PORT}" # Solo para desarrollo
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - biblioteca-net

  # Backend Spring Boot
  backend:
    build:
      context: ./backend
    container_name: spring-backend
    environment:
      BACK_PORT: ${BACK_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${BACK_PORT}:${BACK_PORT}"
    depends_on:
      - db
    networks:
      - biblioteca-net

  # Frontend React
  frontend:
    build:
      context: ./frontend
    container_name: react-frontend
    environment:
      REACT_APP_API_URL: ${PUBLIC_API_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONT_PORT}:3000"
    depends_on:
      - backend
    networks:
      - biblioteca-net

  # Nginx para servir frontend en producci√≥n
  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
    networks:
      - biblioteca-net

volumes:
  postgres_data:

networks:
  biblioteca-net:
    driver: bridge
